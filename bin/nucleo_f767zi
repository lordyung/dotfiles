#!/bin/bash

TARGET=NUCLEO_F767ZI
TOOLCHAIN=GCC_ARM

CSCOPE_FILELIST=cscope.${TARGET}

if [ -z $1 ]; then
    echo Usuage: $0 [program_dir]
    exit
fi

if [ ! -f .mbed ]; then
    mbed config root .
fi

mbed config target ${TARGET}
mbed config toolchain ${toolchain}

# if [ ! -d BUILD/libraries/mbed/${TARGET}/${TOOLCHAIN}/mbed-os/ ];then
    # mbed compile --library --no-archive --source=mbed-os
# fi

##生成 cscope.out 数据库
if [  -f cscope.out ];then
    mbed export --source=$1 --source=mbed-os --build=./ -i make_gcc_arm
    cat Makefile | grep '^OBJECTS' |awk '{print $3}' |sed 's|\.o$|.c|g' > cscope.list

    # 文件不存在，将后缀改为cpp
    rm -f ${CSCOPE_FILELIST}
    for file in `cat cscope.list`
    do
        if [ -f $file ]; then
            echo $file >> ${CSCOPE_FILELIST}
        else
            cpp_file=$(echo $file | sed 's|\.c$|\.cpp|g')
            [ -f $cpp_file ] && echo $cpp_file >> ${CSCOPE_FILELIST}
        fi
    done

    find BUILD/libraries/mbed/${TARGET}/${TOOLCHAIN}/mbed-os -iname "*.h" | sed "s|BUILD/libraries/mbed/${TARGET}/${TOOLCHAIN}/||g" >> ${CSCOPE_FILELIST}

    echo "Generate cscope list `cat ${CSCOPE_FILELIST} | wc -l` Line ..."
    echo "Generate cscope.out..."
    ctags --c-kinds=+p --c++-kinds=+p -L ${CSCOPE_FILELIST}
    cscope -bqu
fi

# mbed export --library --no-archive --source=mbed-os -i make_gcc_arm

# 编译mbed-os
mbed compile --library --no-archive --source=mbed-os

# 编译目标代码
mbed compile --source=$1 --source=BUILD/libraries/mbed/${TARGET}/${TOOLCHAIN}/mbed-os/

#导出目标工程
# mbed export --source=$1 --source=BUILD/libraries/mbed/${TARGET}/${TOOLCHAIN}/mbed-os/ --build=$1 -i make_gcc_arm

if [ -f $PWD/BUILD/${TARGET}/${TOOLCHAIN}/${1}.bin ]; then
    # cp $PWD/BUILD/${TARGET}/${TOOLCHAIN}/${1}.bin .
    echo
fi


